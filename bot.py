import os
from datetime import datetime, timedelta
from telegram import Update, ParseMode, Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import pytz
import psycopg2
from psycopg2 import sql
import csv
from io import StringIO
import pandas as pd

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('7683983088:AAFLJDWfegXb0YkJIGo2t8NAED1ED3xe2WU')
CHANNEL_ID = '@ad_thanks'
ADMIN_ID = 49952799

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
DB_NAME = os.getenv('DB_NAME', 'thanks_bot')
DB_USER = os.getenv('DB_USER', 'postgres')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_PORT = os.getenv('DB_PORT', '5432')

class Database:
    def __init__(self):
        self.conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        self.create_tables()

    def create_tables(self):
        with self.conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS thanks (
                    id SERIAL PRIMARY KEY,
                    sender_id BIGINT,
                    sender_username TEXT,
                    message_text TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                )
            """)
            
            cur.execute("""
                CREATE TABLE IF NOT EXISTS mentions (
                    id SERIAL PRIMARY KEY,
                    thanks_id INTEGER REFERENCES thanks(id),
                    username TEXT,
                    mentioned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                )
            """)
            
            cur.execute("""
                CREATE TABLE IF NOT EXISTS monthly_winners (
                    id SERIAL PRIMARY KEY,
                    username TEXT,
                    thanks_count INTEGER,
                    month INTEGER,
                    year INTEGER,
                    announced_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                )
            """)
            self.conn.commit()

    def add_thanks(self, sender_id, sender_username, message_text, mentions):
        with self.conn.cursor() as cur:
            cur.execute(
                "INSERT INTO thanks (sender_id, sender_username, message_text) VALUES (%s, %s, %s) RETURNING id",
                (sender_id, sender_username, message_text)
            )
            thanks_id = cur.fetchone()[0]
            
            for mention in mentions:
                cur.execute(
                    "INSERT INTO mentions (thanks_id, username) VALUES (%s, %s)",
                    (thanks_id, mention.lower())
                )
            
            self.conn.commit()
        return thanks_id

    def get_current_stats(self):
        with self.conn.cursor() as cur:
            cur.execute("""
                SELECT username, COUNT(*) as count 
                FROM mentions 
                WHERE mentioned_at >= date_trunc('month', NOW())
                GROUP BY username 
                ORDER BY count DESC
            """)
            return cur.fetchall()

    def get_all_time_stats(self):
        with self.conn.cursor() as cur:
            cur.execute("""
                SELECT username, COUNT(*) as count 
                FROM mentions 
                GROUP BY username 
                ORDER BY count DESC
            """)
            return cur.fetchall()

    def get_monthly_winners(self):
        with self.conn.cursor() as cur:
            cur.execute("""
                SELECT username, thanks_count, month, year 
                FROM monthly_winners 
                ORDER BY year DESC, month DESC
            """)
            return cur.fetchall()

    def add_monthly_winner(self, username, count):
        now = datetime.now()
        with self.conn.cursor() as cur:
            cur.execute("""
                INSERT INTO monthly_winners (username, thanks_count, month, year)
                VALUES (%s, %s, %s, %s)
            """, (username, count, now.month, now.year))
            self.conn.commit()

    def get_mentions_for_user(self, username):
        with self.conn.cursor() as cur:
            cur.execute("""
                SELECT t.message_text, t.sender_username, m.mentioned_at
                FROM mentions m
                JOIN thanks t ON m.thanks_id = t.id
                WHERE m.username = %s
                ORDER BY m.mentioned_at DESC
            """, (username.lower(),))
            return cur.fetchall()

    def get_data_for_export(self, start_date, end_date):
        with self.conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    m.username,
                    t.sender_username,
                    t.message_text,
                    m.mentioned_at
                FROM mentions m
                JOIN thanks t ON m.thanks_id = t.id
                WHERE m.mentioned_at BETWEEN %s AND %s
                ORDER BY m.mentioned_at DESC
            """, (start_date, end_date))
            return cur.fetchall()

db = Database()
bot = Bot(token=TOKEN)

def notify_user(username, sender_username, message_text):
    try:
        message = (
            f"üéâ –í–∞—Å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∏!\n\n"
            f"–û—Ç: @{sender_username}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥!"
        )
        bot.send_message(
            chat_id=username,  # –î–ª—è username –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @username
            text=message
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {username}: {e}")

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "@username1 @username2 –¢–µ–∫—Å—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏\n\n"
        "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ —É—á—Ç–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    )

def handle_thanks(update: Update, context: CallbackContext):
    text = update.message.text
    words = text.split()
    
    mentions = []
    i = 0
    while i < len(words) and words[i].startswith('@'):
        mentions.append(words[i])
        i += 1
    
    if not mentions:
        update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        return
    
    gratitude_text = ' '.join(words[i:])
    if not gratitude_text:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    sender = update.effective_user
    thanks_id = db.add_thanks(sender.id, sender.username, gratitude_text, mentions)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
    message = f"{' '.join(mentions)}\n\n{gratitude_text}\n\n#–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"
    context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=message,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for mention in mentions:
        notify_user(mention, sender.username, gratitude_text)
    
    update.message.reply_text("–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –∏ —É—á—Ç–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ!")

def export_data(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: /export 2023-01-01 2023-12-31)
        args = context.args
        if len(args) != 2:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        
        start_date = datetime.strptime(args[0], "%Y-%m-%d")
        end_date = datetime.strptime(args[1], "%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = db.get_data_for_export(start_date, end_date)
        
        if not data:
            update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV
        csv_file = StringIO()
        writer = csv.writer(csv_file)
        writer.writerow(['–ö–æ–º—É', '–û—Ç –∫–æ–≥–æ', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞'])
        
        for row in data:
            writer.writerow(row)
        
        csv_file.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=csv_file,
            filename=f"thanks_export_{args[0]}_{args[1]}.csv"
        )
        
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("stats", stats))
    dp.add_handler(CommandHandler("export", export_data))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_thanks))
    
    job_queue = updater.job_queue
    job_queue.run_monthly(
        announce_winner,
        when=datetime.now(pytz.utc).replace(day=1, hour=0, minute=0) + timedelta(days=32),
        day=1,
        time=datetime.time(hour=0, minute=0)
    )
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
